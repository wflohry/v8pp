cmake_minimum_required(VERSION 3.4)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
project(v8pp LANGUAGES CXX C ASM)

if (NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

option(v8_compress_pointers "Whether v8 was build with V8_COMPRESS_POINTERS" on)
option(v8_monolith "Whether v8 was built with monolith" ON)
option(v8_shared "Whether v8 was built as a shared library" ON)
option(v8_copy_shared "Whether to copy v8 so/dll to output directory" OFF)
if (WIN32)
    set(v8_search_libdir "")
    set(v8_search_includedir "")
else()
    set(v8_search_libdir "/usr/local/lib")
    set(v8_search_includedir "/usr/local/include/v8")
endif()

add_library(v8_deps INTERFACE)
find_path(v8_include_dir NAMES v8.h HINTS "${v8_search_includedir}" REQUIRED)
target_include_directories(v8_deps INTERFACE v8_include_dir)
if (v8_compress_pointers)
    set(v8_flags "V8_COMPRESS_POINTERS")
endif()
set(v8_libnames "")
if (WIN32)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(v8_flags "-D__clang__;${v8_flags}")
    endif()
    if (v8_shared)
        set(v8_ext "dll.lib")
        set(v8_ext_link ".dll.lib")
    else()
        set(v8_ext "lib")
        set(v8_ext_link "")
    endif()
    if (v8_monolith)
        find_path(v8_lib_dir NAMES "v8_monolith.${v8_ext}")
        set(v8_libnames "v8_monolith")
    else()
        find_path(v8_lib_dir NAMES "v8_libbase.${v8_ext}" "v8_libplatform.${v8_ext}" "v8.${v8_ext}")
        set(v8_libnames "v8_libbase${v8_ext_link};v8_libplatform${v8_ext_link};v8${v8_ext_link}")
    endif()

    if (v8_shared AND v8_copy_shared)
        add_custom_target(copy)
        foreach(file v8_libbase.dll;v8_libplatform.dll;v8.dll;zlib.dll)
            message("Adding copy instruction for ${file};  ${CMAKE_BINARY_DIR}/$<CONFIG>")
            add_custom_command(
                TARGET copy POST_BUILD 
                COMMAND ${CMAKE_COMMAND} -E copy_if_different ${v8_lib_dir_shared}/${file} ${CMAKE_BINARY_DIR}/$<CONFIG>/${file})
        endforeach()
        add_dependencies(v8_deps INTERFACE copy)
    endif()
    set(v8_syslib "winmm.lib;dbghelp.lib")
else()
    if (v8_shared)
        set(v8_ext "so")
        set(v8_flags "BUILDING_V8_PLATFORM_SHARED;${v8_flags}")
    else()
        set(v8_ext "a")
    endif()
    if (v8_monolith)
        find_path(v8_lib_dir NAMES "libv8_monolith.${v8_ext}"  HINTS "${v8_search_libdir}")
        set(v8_libnames "v8_monolith")
    else()
        find_path(v8_lib_dir NAMES "v8_libbase.${v8_ext}" "v8_libplatform.${v8_ext}" "v8.${v8_ext}"  HINTS "${v8_search_libdir}")
    endif()
    set(v8_syslib "dl;pthread")
endif()

if (NOT v8_lib_dir)
    message(FATAL_ERROR "Unable to find v8_lib_dir")
endif()

target_link_libraries(v8_deps INTERFACE  ${v8_libnames} ${v8_syslib})
target_link_directories(v8_deps INTERFACE ${v8_lib_dir})
target_compile_definitions(v8_deps INTERFACE ${v8_flags} )
target_compile_options(v8_deps INTERFACE)

file(GLOB v8pp_sources v8pp/*.cpp v8pp/*.hpp v8pp/*.ipp)
add_library(v8pp ${v8pp_sources})
target_include_directories(v8pp PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${v8_include_dir})
target_link_libraries(v8pp PUBLIC v8_deps)
target_compile_options(v8pp PUBLIC  )
add_library(v8pp::v8pp ALIAS v8pp)

option(v8pp_build_tests "Whether to build v8pp tests" OFF)
if (v8pp_build_tests)
    file(GLOB v8pp_test_sources test/*.cpp test/*.hpp)
    add_executable(v8pp_test ${v8pp_test_sources})
    target_link_libraries(v8pp_test PUBLIC v8pp v8_deps)
    target_compile_options(v8pp_test PUBLIC  )
endif()
